.TH MARK 1 "June 2019" "pass-import"

.SH NAME
pass-import \- A \fBpass\fP(1) extension for importing data from most of
the existing password manager.


.SH SYNOPSIS
\fBpass import\fP [-h] [-p PATH] [-a] [-c] [-C] [-s CAR] [--cols COLS]
            [--config CONFIG] [-l] [-f] [-V] [-q | -v] [manager] [file]

.SH DESCRIPTION
\fBpass import\fP is a password store extension allowing you to import your
password database to a password store repository conveniently. It natively
supports import from \# NB BEGIN
39
\# NB END
different password managers. More manager support can
easily be added.

Passwords are imported into the existing default password store, therefore
the password store must have been initialised before with \fBpass init\fP.

By default, pass imports entries at the root of the password store and only
keeps the main data (password, login, email, URL, group). This behaviour can be
changed using the provided options.

Pass import handles duplicates and is compatible with \fIbrowserpass\fP. It
imports OTP secret in a way that is compatible with \fIpass-otp\fP.

.SH COMMAND
.TP
\fBpass import\fP [ \fI--path <path>\fP, \fI-p <path>\fP ] [ \fI--clean\fP, \fI-c\fP ] [ \fI--all\fP, \fI-a\fP ]
     [\fI--convert\fP, \fI-Cl\fP] [ \fI--sep\fP, \fI-s\fP ] [\fI--list\fP, \fI-l\fP] [ \fI--force\fP, \fI-f\fP ]
     [ \fI--config <file>\fP ] [ \fI--cols <cols>\fP ] [ \fI--quiet\fP, \fI-q\fP ] [ \fI--verbose\fP, \fI-v\fP ]
     \fImanager\fP \fIfile\fP

Import data from most of the password manager. Passwords are imported in the
existing default password store, therefore the password store must have been
initialised before with \fIpass init\fP.

.I manager
refer to one of the supported password managers from which you want to import
your data. The complete list of supported manager can be found in the section
\fISUPPORTED MANAGERS\fP.

.I file
is the path to the file that contains the data to import. If file is not
present, pass-import will read the data from stdin.

Specific root directory to use in the password store can be given using
\fI--path\fP or \fI-p\fP is specified, along with a argument.

If \fI--clean\fP or \fI-c\fP is specified, clean the password path in order to
be more command line friendly.

If \fI--all\fP or \fI-a\fP is specified, conserve and import all the data
present in the backup file. Otherwise, only title, password, login, URL,
comments and group data are imported.

If \fI--convert\fP or \fI-C\fP is specified, convert the invalid caracters
present in the paths before import. invalid caracters for both Windows and Unix
systems are supported. The invalid caracters are remplaced by the default
separator: '-'

If \fI--separator\fP or \fI-s\fP is specified, provide a caracter of replacement
for the path separator. Default: '-'

If \fI--list\fP or \fI-l\fP is specified, print the list of the available
password manager.

If \fI--force\fP or \fI-f\fP is specified, the import process will overwrite
existing password entry if it already exists.

If \fI--config\fP is specified along with a argument, pass-import will consider
this config file instead of the default one '.import'.

If \fI--cols\fP is specified along with a argument, set the expected CSV columns
to map columns to credential attributes. Only used for the generic csv importer.

.SH OPTIONS

.TP
\fB\-p <path>\fB, \-\-path=<path>\fR
Import the passwords to a specific subfolder.

.TP
\fB\-c\fB, \-\-clean\fR
Clean data before import.

.TP
\fB\-a\fB, \-\-all\fR
Also import all the extra data present.

.TP
\fB\-C\fB, \-\-convert\fR
Convert the invalid caracters present in the paths.

.TP
\fB\-s\fB, \-\-separator\fR
Provide a caracter of replacement for the path separator. Default: '-'

.TP
\fB\-\-config=<file>\fR
Set a config file. Default: '.import'

.TP
\fB\-\-cols=<cols>\fR
CSV expected columns to map columns to credential attributes. Only used for the
generic csv importer.

.TP
\fB\-l\fB, \-\-list\fR
List the supported password managers.

.TP
\fB\-f\fB, \-\-force\fR
Overwrite existing path.

.TP
\fB\-q\fB, \-\-quiet\fR
Be quiet.

.TP
\fB\-v\fB, \-\-verbose\fR
Be verbose.

.TP
\fB\-V\fB, \-\-version\fR
Show the program version and exit.

.TP
\fB\-h\fB, \-\-help\fR
Show usage message.


.SH EXAMPLES

.TP
Import password from KeePass
.B zx2c4@laptop ~ $ pass import keepass keepass.kdbx
.br
(*) Importing passwords from keepass
.br
 .  File: keepass.kdbx
.br
 .  Number of password imported: 6
.br
 .  Passwords imported:
.br
       Social/mastodon.social
.br
       Social/twitter.com
.br
       Social/news.ycombinator.com
.br
       Servers/ovh.com/bynbyjhqjz
.br
       Servers/ovh.com/jsdkyvbwjn
.br
       Bank/aib

.TP
Import password to a different password store
.B zx2c4@laptop ~ $ export PASSWORD_STORE_DIR="~/.mypassword-store"
.br
.B zx2c4@laptop ~ $ pass init <gpg-id>
.br
.B zx2c4@laptop ~ $ pass import keepass keepass.kdbx

.TP
Import password to a subfolder
.B zx2c4@laptop ~ $ pass import keepass keepass.kdbx -p Import/
.br
(*) Importing passwords from keepass
.br
 .  File: keepass.kdbx
.br
 .  Root path: Import
.br
 .  Number of password imported: 6
.br
 .  Passwords imported:
.br
      Import/Social/mastodon.social
.br
      Import/Social/twitter.com
.br
      Import/Social/news.ycombinator.com
.br
      Import/Servers/ovh.com/bynbyjhqjz
.br
      Import/Servers/ovh.com/jsdkyvbwjn
.br
      Import/Bank/aib


.SH CONFIGURATION FILE

Some configuration can be read from a configuration file called `\fI.import\fP if
it is present at the root of the password repository. The configuration read from
this file will be overwritten by their coresponding command line option
if present.

.TP
Example of the .import configuration file for the default password repository
.B zx2c4@laptop ~ $ cat ~/.password-store/.import
.br
---

# Separator string
.br
separator: '-'

# The list of string that should be replaced by other string. Only activated
.br
# if the `clean` option is enabled.
.br
cleans:
.br
  ' ': '-'
.br
  '&': 'and'

# The list of protocol. To be removed from the title.
.br
protocols:
.br
  - http://

# The list of invalid caracters. Replaced by the separator.
.br
invalids:
.br
  - '<'
.br
  - '>'


.SH SUPPORTED MANAGERS

\# SUPPORTED LIST BEGIN

.TP
\fB1password\fP
Website: \fIhttps://1password.com/\fP

Export: See this guide: \fIhttps://support.1password.com/export/\fP

Command: pass import 1password file.csv

.TP
\fB1password4\fP
Website: \fIhttps://1password.com/\fP

Export: See this guide: \fIhttps://support.1password.com/export\fP

Command: pass import 1password4 file.csv

.TP
\fB1password4pif\fP
Website: \fIhttps://1password.com/\fP

Export: See this guide: \fIhttps://support.1password.com/export/\fP

Command: pass import 1password4pif file.1pif

.TP
\fBaegis\fP
Website: \fIhttps://github.com/beemdevelopment/Aegis\fP

Export: Settings> Tools: Export (Plain or encrypted)

Command: pass import aegis file.json

.TP
\fBandotp\fP
Website: \fIhttps://github.com/andOTP/andOTP\fP

Export: Backups> Backup plain, gpg or password encrypted

Command: pass import andotp file.{json, json.aes, gpg}

.TP
\fBapple-keychain\fP
Website: \fIhttps://support.apple.com/guide/keychain-access\fP

Export: See this guide: \fIhttps://gist.github.com/santigz/601f4fd2f039d6ceb2198e2f9f4f01e0\fP

Command: pass import apple-keychain file.txt

.TP
\fBbitwarden\fP
Website: \fIhttps://bitwarden.com/\fP

Export: Tools: Export

Command: pass import bitwarden file.csv

.TP
\fBbuttercup\fP
Website: \fIhttps://buttercup.pw/\fP

Export: File > Export > Export File to CSV

Command: pass import buttercup file.csv

.TP
\fBchrome\fP
Website: \fIhttps://support.google.com/chrome\fP

Export: See this guide: \fIhttps://www.axllent.org/docs/view/export-chrome-passwords/\fP

Command: pass import chrome file.csv

.TP
\fBchromesqlite\fP
Website: \fIhttps://support.google.com/chrome\fP

Export: See this guide: \fIhttps://www.axllent.org/docs/view/export-chrome-passwords/\fP

Command: pass import chromesqlite file.csv

.TP
\fBcsv\fP
Website: \fI\fP

You should use the --cols option to map columns to credential attributes.
The recognized column names by pass-import are the following:
    'title', 'password', 'login', 'url', 'comments', 'otpauth', 'group'
``password`` will be the first line of the password entry. ``title`` and ``group`` field are used to generate the password path. If you have otp data, they should be named as ``otpauth``. These are the *standard* field names. You can add any other field you want.

Export: generic csv importer

Command: pass import csv file.csv --cols 'url,login,,password'

.TP
\fBdashlane\fP
Website: \fIhttps://www.dashlane.com/\fP

Export: File > Export > Unsecured Archive in CSV

Command: pass import dashlane file.csv

.TP
\fBencryptr\fP
Website: \fIhttps://spideroak.com/encryptr/\fP

Export: Compile from source and follow instructions from this guide: \fIhttps://github.com/SpiderOak/Encryptr/issues/295#issuecomment-322449705\fP

Command: pass import encryptr file.csv

.TP
\fBenpass\fP
Website: \fIhttps://www.enpass.io/\fP

Export: File > Export > As CSV

Command: pass import enpass file.csv

.TP
\fBenpass6\fP
Website: \fIhttps://www.enpass.io/\fP

Export: Menu > File > Export > As JSON

Command: pass import enpass6 file.json

.TP
\fBfpm\fP
Website: \fIhttp://fpm.sourceforge.net/\fP

Export: File > Export Passwords: Plain XML

Command: pass import fpm file.xml

.TP
\fBgnome-authenticator\fP
Website: \fIhttps://gitlab.gnome.org/World/Authenticator\fP

Export: Backup > in a plain-text JSON file

Command: pass import gnome-authenticator json.csv

.TP
\fBgnome-keyring\fP
Website: \fIhttps://wiki.gnome.org/Projects/GnomeKeyring\fP

Export: Nothing to do

Command: pass import gnome-keyring

.TP
\fBgorilla\fP
Website: \fIhttps://github.com/zdia/gorilla/wiki\fP

Export: File > Export: Yes: CSV Files

Command: pass import gorilla file.csv

.TP
\fBkedpm\fP
Website: \fIhttp://fpm.sourceforge.net/\fP

Export: File > Export Passwords: Plain XML

Command: pass import fpm file.xml

.TP
\fBkeepass\fP
Website: \fIhttps://www.keepass.info\fP

Export: Nothing to do

Command: pass import keepass file.kdbx

.TP
\fBkeepass-csv\fP
Website: \fIhttps://www.keepass.info\fP

Export: File > Export > Keepass (CSV)

Command: pass import keepass-csv file.csv

.TP
\fBkeepass-xml\fP
Website: \fIhttps://www.keepass.info\fP

Export: File > Export > Keepass2 (XML)

Command: pass import keepass-xml file.xml

.TP
\fBkeepassx\fP
Website: \fIhttps://www.keepassx.org/\fP

Export: File > Export to > Keepass XML File

Command: pass import keepassx file.xml

.TP
\fBkeepassx2\fP
Website: \fIhttps://www.keepassx.org/\fP

Export: Nothing to do

Command: pass import keepassx2 file.kdbx

.TP
\fBkeepassx2-csv\fP
Website: \fIhttps://www.keepassx.org/\fP

Export: Database > Export to CSV File

Command: pass import keepassx2-csv file.csv

.TP
\fBkeepassxc\fP
Website: \fIhttps://keepassxc.org/\fP

Export: Nothing to do

Command: pass import keepassxc file.kdbx

.TP
\fBkeepassxc-csv\fP
Website: \fIhttps://keepassxc.org/\fP

Export: Database > Export to CSV File

Command: pass import keepassxc-csv file.csv

.TP
\fBkeeper\fP
Website: \fIhttps://keepersecurity.com/\fP

Export: Settings > Export : Export to CSV File

Command: pass import keeper file.csv

.TP
\fBlastpass\fP
Website: \fIhttps://www.lastpass.com/\fP

Export: More Options > Advanced > Export

Command: pass import lastpass file.csv

.TP
\fBmyki\fP
Website: \fIhttps://myki.com/\fP

Export: See this guide: \fIhttps://support.myki.com/myki-app/exporting-your-passwords-from-the-myki-app/how-to-export-your-passwords-account-data-from-myki\fP

Command: pass import myki file.csv

.TP
\fBnetworkmanager\fP
Website: \fIhttps://wiki.gnome.org/Projects/NetworkManager\fP

Support import from the installed network configuration but also
from specific directory of  networkmanger configuration file and from
given file.

From directory of ini file: pass import networkmanager dir/

From ini file: pass import networkmanager file.ini

Export: Also support specific networkmanager dir and ini file

Command: pass import networkmanager

.TP
\fBpass\fP
Website: \fIhttps://passwordstore.org\fP

Export: Nothing to do

Command: pass import pass path/to/store

.TP
\fBpasspie\fP
Website: \fIhttps://passpie.readthedocs.io\fP

Export: `passpie export file.yml`

Command: pass import passpie file.yml

.TP
\fBpasswordexporter\fP
Website: \fIhttps://github.com/kspearrin/ff-password-exporter\fP

Export: Add-ons Prefs: Export Passwords: CSV

Command: pass import passwordexporter file.csv

.TP
\fBpwsafe\fP
Website: \fIhttps://pwsafe.org/\fP

Export: File > Export To > XML Format

Command: pass import pwsafe file.xml

.TP
\fBrevelation\fP
Website: \fIhttps://revelation.olasagasti.info/\fP

Export: File > Export: XML

Command: pass import revelation file.xml

.TP
\fBroboform\fP
Website: \fIhttps://www.roboform.com/\fP

Export: Roboform > Options > Data & Sync > Export To: CSV file

Command: pass import roboform file.csv

.TP
\fBupm\fP
Website: \fIhttp://upm.sourceforge.net/\fP

Export: Database > Export

Command: pass import upm file.csv
\# SUPPORTED LIST END


.SH SECURITY CONSIDERATION

.TP
Passwords should not be written in plain text form on the drive. Therefore when possible you should import it directly from the encrypted data:

.B zx2c4@laptop ~ $ pass import keepass file.kdbx

.TP
Otherwise, if your password manager does not have this command line option, you should take care of securely removing the plain text password database:

.B zx2c4@laptop ~ $ pass import lastpass data.csv
.br
.B zx2c4@laptop ~ $ srm data.csv

.TP
You might also want to update the passwords imported using \fBpass update(1)\fP.


.SH SEE ALSO
.BR pass(1),
.BR pass-tomb(1),
.BR pass-update(1),
.BR pass-otp(1),
.BR pass-audit(1).


.SH AUTHORS
.B pass import
was written by
.MT alexandre@pujol.io
Alexandre Pujol
.ME .


.SH COPYING
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
